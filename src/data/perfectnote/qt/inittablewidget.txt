void MainWindow::InitTableWidget()
{

    record_tw->setColumnCount(6);
    record_tw->setHorizontalHeaderLabels(QStringList() << tr("站点") << tr("用户名") << tr("密码")<< tr("备注") << tr("hide") << tr("other"));    // 设置列名
//    for(int i = 0; i < 5; i++)
//        record_tw->setColumnWidth(i, 200);
    record_tw->setColumnWidth(2, 180);
    record_tw->setColumnWidth(3, 180);
    record_tw->setColumnHidden(4,true);
    record_tw->setColumnWidth(5, 240);
    //获得水平方向表头的item对象
    QTableWidgetItem *columnHeaderItem = record_tw->horizontalHeaderItem(1);
    //columnHeaderItem->setFont(QFont("Helvetica"));  //设置字体
    columnHeaderItem->setBackgroundColor(QColor(0,60,10));  //设置单元格背景颜色
    columnHeaderItem->setTextColor(QColor(200,111,30));     //设置文字颜色

    //无法编辑表格
    record_tw->setEditTriggers(QAbstractItemView::NoEditTriggers);


    //按条件进行搜索
//       string startString = "NULL";
//       if(start->text() != NULL && startLabel->isChecked()) startString = QStringToStdString(start->text());
//       string endString = "NULL";
//       if(end->text() != NULL && endLabel->isChecked()) endString = QStringToStdString(end->text());
//       string timeString = "NULL";
//       if(dateTime->text() != NULL && timeLabel->isChecked()) timeString = QStringToStdString(dateTime->text());
//       string typeString = "NULL";
//       if(type->currentText() != NULL && typeLabel->isChecked()) typeString = QStringToStdString(type->currentText());
//       vector<EventStruct>  es = client.getEvent(startString,endString,timeString,typeString);
//       vector<EventStruct>::iterator iter2 = es.begin();
//       if(es.size() == 0) {
//           record_tw->clearContents();
//           record_tw->setRowCount(0);
//   //        record_tw->show();
//           QMessageBox::information(this, tr(""),
//                   tr("未搜索到结果！"),
//                   QMessageBox::tr("确定"));
//           return ;
//       }
//       record_tw->setRowCount(es.size());   // 设置结果占的行数
//   //    if(es.size() <= resultNum) {
//           record_tw->clearContents();
//   //    }
//       resultNum = es.size();


    QString file_path = ".\\data\\hankin.txt";
    vector<RecordStruct> ret = ReadFile(file_path.toLatin1().data());
    int record_cnt = static_cast<int>(ret.size());

    qDebug("current record size = %d", record_cnt);
    record_tw->setRowCount(record_cnt);

    for (int i = 0; i < record_cnt; i++)
    {
        record_tw->setRowHeight(i,50);
        QTableWidgetItem *item0 = record_tw->item(i,0); // 发布人
        QTableWidgetItem *item1 = record_tw->item(i,1); // 人数
        QTableWidgetItem *item2 = record_tw->item(i,2); // 始发地
        QTableWidgetItem *item3 = record_tw->item(i,3); // 备注
        //QTableWidgetItem *item4 = record_tw->item(i,4); //

        QWidget *remark = new QWidget();
        QGridLayout *layout = new QGridLayout(record_tw);
        // 创建QPushButton控件
        QPushButton *joinBtn = new QPushButton(record_tw);
        joinBtn->setText("一起嗨");
        layout->addWidget(joinBtn,0,0,1,1);
        QPushButton *detailBtn = new QPushButton(record_tw);
        detailBtn->setText("详情");
        layout->addWidget(detailBtn,0,1,1,1);
        remark->setLayout(layout);

        size_t j =  static_cast<size_t>(i);

        if(item0) {
            item0->setFlags((item0->flags()&(~Qt::ItemIsEditable)));
        }
        else {
            item0 = new QTableWidgetItem;
            item0->setText(StdString2QString(ret[j].web_name));
            item0->setTextAlignment(Qt::AlignCenter);
            record_tw->setItem(i, 0, item0);

            item1 = new QTableWidgetItem;
            //item1->setText(QString("%1人").arg(5));
            item1->setText(StdString2QString(ret[j].user_name));
            item1->setTextAlignment(Qt::AlignCenter);
            record_tw->setItem(i, 1, item1);

            item2 = new QTableWidgetItem;
            item2->setText(StdString2QString(ret[j].pwd));
            item2->setTextAlignment(Qt::AlignCenter);
            record_tw->setItem(i, 2, item2);

            item3 = new QTableWidgetItem;
            item3->setText(StdString2QString(ret[j].note));
            item3->setTextAlignment(Qt::AlignCenter);
            record_tw->setItem(i, 3, item3);

            //item7 = new QTableWidgetItem;
            record_tw->setCellWidget(i,5,remark);

        }
    }
    record_tw->show();
    //record_tw->clearContents();
}


void MainWindow::ChgBtnClicked()
{
    record_tw->item(current_select_row, 0)->setText(web_name2->text());
    record_tw->item(current_select_row, 1)->setText(user_name2->text());
    record_tw->item(current_select_row, 2)->setText(pwd_name2->text());
    record_tw->item(current_select_row, 3)->setText(note_name2->text());
    Save2Local();
    detail_dialog->close();
}

void MainWindow::Tips()
{
    QMessageBox::information(this, tr(""),
            tr("无效的记录！"),
            QMessageBox::tr("确定"));
}

bool MainWindow::IsValidRecord()
{
    if (web_name2->text() == nullptr) {
        goto FAILED;
    }
    if (user_name2->text() == nullptr) {
        goto FAILED;
    }
    if (pwd_name2->text() == nullptr) {
        goto FAILED;
    }

    return true;
FAILED:
    Tips();
    return false;
}



void MainWindow::AddBtnClicked()
{
    if(IsValidRecord() == false) return ;
    QMessageBox mb(QMessageBox::Warning, "","确定要添加当前记录？");
    mb.setStandardButtons(QMessageBox::Ok|QMessageBox::Cancel);
    mb.setButtonText (QMessageBox::Ok,QString("确 定"));
    mb.setButtonText (QMessageBox::Cancel,QString("取 消"));
    if(mb.exec() == QMessageBox::Ok)
    {
        /*添加event*/
        RecordStruct rs;
        rs.web_name = QString2StdString(web_name2->text());
        rs.user_name = QString2StdString(user_name2->text());
        rs.pwd = QString2StdString(pwd_name2->text());
        rs.note = QString2StdString(note_name2->text());


        QString file_path = ".\\data\\hankin.txt";
        if (!WriteFile(file_path.toLatin1().data(), "a", rs))
        {
            InitTableWidget();
            QMessageBox::information(this, tr(""),
                    tr("添加成功！"),
                    QMessageBox::tr("确定"));
        } else {
            QMessageBox::information(this, tr(""),
                    tr("添加失败！"),
                    QMessageBox::tr("确定"));
        }
    }
    detail_dialog->close();
}



void MainWindow::CTeamDemo()
{
    QPixmap image;
    //QImage *image = new QImage();//定义一张图片
    QLabel *avatar = new QLabel(this);  //头像
    QLabel *userName = new QLabel(this);//用户名称
    QGridLayout *mainLayout = new QGridLayout(this);
    QCheckBox *startLabel = new QCheckBox(this);
    QLineEdit *start = new QLineEdit(this); //始发地
    QCheckBox *endLabel = new QCheckBox(this);
    QLineEdit *end = new QLineEdit(this);   //目的地
    QCheckBox *timeLabel = new QCheckBox(this);
    QDateEdit *dateTime = new QDateEdit(this);//出发日期
    QCheckBox *typeLabel = new QCheckBox(this);
    QComboBox *type = new QComboBox(this);  //活动项目

    QPushButton *searchBtn = new QPushButton(this); //搜索按钮
    QPushButton *publishBtn = new QPushButton(this);  //发布按钮


    image.load("images/alienx64.png");//加载
    avatar->clear();//清空
    avatar->setPixmap(image);//加载到Label标签
    avatar->show();//显示
    avatar->setMaximumHeight(80);
    avatar->setMaximumWidth(80);
     mainLayout->addWidget(avatar,0,3,1,1);
    //    userName->setText(userNameGlobal);
     userName->setAlignment(Qt::AlignCenter);
     userName->setMinimumHeight(100);
     mainLayout->addWidget(userName,0,2,1,3);

     startLabel->setText("始发地:");
     mainLayout->addWidget(startLabel,1,0,1,1);
     mainLayout->addWidget(start,1,1,1,3);
     timeLabel->setText("出发日期:");
     dateTime->setDisplayFormat("yyyy-MM-dd");
     dateTime->setCalendarPopup(true);
    //    QDateTime current_date_time = QDateTime::currentDateTime().;
    //    QString current_date = current_date_time.toString("yyyy-MM-dd");
     dateTime->setDate(QDate::currentDate());
    //    dateTime->setDisplayFormat(current_date);
     mainLayout->addWidget(timeLabel,1,4,1,1);
     mainLayout->addWidget(dateTime,1,5,1,3);

     endLabel->setText("目的地:");
     mainLayout->addWidget(endLabel,2,0,1,1);
     mainLayout->addWidget(end,2,1,1,3);
     typeLabel->setText("活动项目:");
     mainLayout->addWidget(typeLabel,2,4,1,1);
     type->addItem("电影");
     type->addItem("骑自行车");
     type->addItem("旅游");
     type->addItem("打球");
     type->addItem("下棋");
     type->addItem("打牌");
     type->addItem("露营");
     mainLayout->addWidget(type,2,5,1,3);
     QLabel *hj = new QLabel();
     hj->setText("温馨提示:搜索时可以勾选相应的条件.");
     hj->setStyleSheet("color:rgb(100,100,100);");
     mainLayout->addWidget(hj,3,0,1,2);

     searchBtn->setText("搜索");
     mainLayout->addWidget(searchBtn,3,7,1,1);
     publishBtn->setText("发布");
     mainLayout->addWidget(publishBtn,3,6,1,1);

     // 反馈信息

    mainLayout->addWidget(record_tw, 4, 0, 1, 8);

     ui->centralwidget->setLayout(mainLayout);

    connect(searchBtn, &QPushButton::clicked, this, &MainWindow::PNActionClicked);
}